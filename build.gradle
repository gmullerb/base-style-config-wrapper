//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt
plugins {
  id 'all.shared.gradle.base-style-config-wrapper'
  id 'all.shared.gradle.file-lister' version '1.0.1'
  id 'com.github.ksoichiro.console.reporter' version '0.6.2'
  id 'checkstyle'
  id 'codenarc'
  id 'com.gradle.plugin-publish' version '0.10.0'
  id 'groovy'
  id 'jacoco'
}

repositories {
  jcenter()
  maven {
    url 'https://dl.bintray.com/gmullerb/all.shared.gradle'
  }
}

dependencies {
  implementation gradleApi()
  testCompile 'all.shared.gradle:spy-project-factory:+'
  testCompile 'org.junit.jupiter:junit-jupiter-api:+'
  testCompile 'org.mockito:mockito-core:+'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:+'
}

final PLUGIN_SITE = 'https://github.com/gmullerb/base-style-config-wrapper/'

final allFilesInTree = fileLister.obtainPartialFileTree()

// Plugin settings
//////////////////

consoleReporter {
  jacoco {
    autoconfigureCoverageConfig false
  }
}

pluginBundle {
  website = PLUGIN_SITE
  vcsUrl = PLUGIN_SITE
  description = 'A wrapper for \'base-style-config\' configurations'
  tags = ['base-style-config', 'code style', 'coding style', 'coding standards', 'best practices',
    'checkstyle', 'pmd', 'codenarc', 'eslint', 'typescript-eslint', 'tslint', 'java', 'javascript', 'groovy', 'gradle code',
    'backend code', 'frontend code', 'java code', 'groovy code', 'javascript code', 'js code', 'typescript code', 'ts code',
    'build code', 'gradle code', 'java', 'groovy', 'javascript', 'js', 'typescript', 'ts', 'gradle',
    'java style', 'groovy style', 'javascript style', 'js style', 'typescript style', 'ts style', 'gradle style',
    'tabulation checking', 'end of file checking', 'tab character']

  plugins {
    thePlugin {
      id = project.hasProperty('PLUGIN_ID')
        ? property('PLUGIN_ID')
        : 'Set plugin id'
      displayName = 'Base Style Configurations\' Wrapper plugin'
    }
  }
}

// TASKS
////////

task assessCommon (type: Checkstyle) {
  // Checkstyle task settings
  classpath = files('dummy') // Required by Checkstyle, Not required for Checker modules
  config = baseStyleConfig.common.checkstyleConfig
  source = allFilesInTree
  // gradle task settings
  description = 'Run Common Checkstyle analysis for all files.'
  group = GROUP_ASSESS
}

task assessGradle(type: CodeNarc) {
  // CodeNarc task settings
  source = allFilesInTree.filter { it.name.matches('.*\\.gradle') }
  // gradle task settings
  description = 'Run Codenarc analysis for all gradle files.'
  group = GROUP_ASSESS
}

task assess {
  group = GROUP_ASSESS
  dependsOn = ['codenarcMain', 'codenarcTest']
}

// Task settings
////////////////

codenarcTest {
  mustRunAfter = ['compileTestGroovy']
}

check {
  dependsOn += ['assess']
}

test {
  // Test task settings
  useJUnitPlatform()
  // gradle task settings
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification, reportCoverage
}

jacocoTestReport {
  doFirst {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/*_closure*')
    })
  }

  reports {
      xml.enabled true
  }
}

jacocoTestCoverageVerification {
  // jacocoTestCoverageVerification task settings
  doFirst {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/*_closure*')
    })
  }
  violationRules {
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'BRANCH'
        value = 'COVEREDRATIO'
        minimum = 0.95
      }
    }
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'INSTRUCTION'
        value = 'COVEREDRATIO'
        minimum = 0.875
      }
    }
  }
  // gradle task settings
  shouldRunAfter jacocoTestReport
}

reportCoverage {
  shouldRunAfter jacocoTestReport
}

// Default task
///////////////

defaultTasks 'assessCommon', 'assessGradle', 'build'
