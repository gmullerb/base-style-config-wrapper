//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt
plugins {
  id 'all.shared.gradle.file-lister' version '1.0'
  id 'checkstyle'
  id 'codenarc'
  id 'com.gradle.plugin-publish' version '0.10.0'
  id 'groovy'
  id 'jacoco'
}

repositories {
  jcenter()
}

dependencies {
  compile gradleApi()
  testCompile gradleTestKit()
  testCompile 'org.junit.jupiter:junit-jupiter-api:+'
  testCompile 'org.mockito:mockito-core:+'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:+'
}

final PLUGIN_SITE = 'https://github.com/gmullerb/base-style-config-wrapper/'

apply plugin: 'all.shared.gradle.base-style-config-wrapper'

final allFilesInTree = fileLister.obtainPartialFileTree()

// Plugin settings
//////////////////

checkstyle {
  toolVersion = CHECKSTYLE_VERSION
  config = baseStyleConfig.common.checkstyleConfig
}

codenarc {
  toolVersion = CODENARC_VERSION
  config = baseStyleConfig.common.codenarcConfig
}

pluginBundle {
  website = PLUGIN_SITE
  vcsUrl = PLUGIN_SITE
  description = 'A wrapper for \'base-style-config\' configurations'
  tags = ['base-style-config', 'code style', 'coding style', 'coding standards', 'best practices',
    'checkstyle', 'pmd', 'codenarc', 'eslint', 'stylelint', 'java', 'javascript', 'groovy', 'gradle code',
    'backend code', 'frontend code', 'build code', 'tabulation checking', 'end of file checking',
    'tab character']

  plugins {
    thePlugin {
      id = project.hasProperty('PLUGIN_ID') ? property('PLUGIN_ID') : 'Set plugin id'
      displayName = 'Base Style Configurations\' Wrapper plugin'
    }
  }
}

// TASKS
////////

task assessCommon (type: Checkstyle) {
  // Checkstyle task settings
  classpath = files('dummy') // Required by Checkstyle, Not required for Checker modules
  source = allFilesInTree
  // gradle task settings
  description = 'Run Common Checkstyle analysis for all files.'
  group = GROUP_ASSESS
}

task assessGradle(type: CodeNarc) {
  // CodeNarc task settings
  source = allFilesInTree.filter { it.name.matches('.*\\.gradle') }
  // gradle task settings
  description = 'Run Codenarc analysis for all gradle files.'
  group = GROUP_ASSESS
}

// Task settings
////////////////

assemble {
  dependsOn += ['assessCommon', 'assessGradle', 'codenarcMain', 'codenarcTest']
}

test {
  // Test task settings
  useJUnitPlatform()
  // gradle task settings
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

// Default task
///////////////

defaultTasks 'build'
